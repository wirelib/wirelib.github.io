[
{
	"uri": "https://wirelib.github.io/installation/",
	"title": "Install",
	"tags": [],
	"description": "",
	"content": " How to Install WIP\n"
},
{
	"uri": "https://wirelib.github.io/class_reference/wire/",
	"title": "Wire",
	"tags": [],
	"description": "",
	"content": "wip\n"
},
{
	"uri": "https://wirelib.github.io/class_reference/telegram/",
	"title": "Telegram",
	"tags": [],
	"description": "",
	"content": "wip\n"
},
{
	"uri": "https://wirelib.github.io/usage/",
	"title": "User Manual",
	"tags": [],
	"description": "",
	"content": " User Manual "
},
{
	"uri": "https://wirelib.github.io/class_reference/",
	"title": "Class Reference",
	"tags": [],
	"description": "",
	"content": " Class Reference "
},
{
	"uri": "https://wirelib.github.io/class_reference/context/",
	"title": "Context",
	"tags": [],
	"description": "",
	"content": "wip\n"
},
{
	"uri": "https://wirelib.github.io/examples/echo/",
	"title": "Echo Bot",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s write a simple echo bot that replies with the same message\npublic class EchoBot { public static void main(String[] args) { // Create our bot instance final Wire bot = new Wire(\u0026quot;token\u0026quot;); // Configure behavior bot.on(UpdateType.MESSAGE, ctx -\u0026gt; { ctx.reply(ctx.getMessage().getText()); return null; // Mandatory! }); // Start polling bot.start(); } }  As you can see the bot configuration is pretty straight forward, and if you have already used [TelegrafJS]() you\u0026rsquo;ll recognize most of the syntax.\nLet\u0026rsquo;s break it down a bit.\nFirst we create our bot instance by passing our Telegram token:\nfinal Wire bot = new Wire(\u0026quot;token\u0026quot;);\nThen we register a callback for incoming message updates. This is basically everything that is not a callback query:\nbot.on(UpdateType.MESSAGE, ctx -\u0026gt; { ctx.reply(ctx.getMessage().getText()); return null; });  CAVEAT: Wire is written in [Kotlin](), and callbacks are implemented as functions of type (ctx: Context) -\u0026gt; Unit. This means that while in Kotlin we can write our lambda as:\nbot.on(UpdateType.MESSAGE) { ctx -\u0026gt; ctx.reply(ctx.getMessage().getText()); }  in Java we need to add return null; at the end to compensate for the Unit return type. This is unfortunate but necessary.\n"
},
{
	"uri": "https://wirelib.github.io/examples/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": " Examples "
},
{
	"uri": "https://wirelib.github.io/installation/manual/",
	"title": "Manual",
	"tags": [],
	"description": "",
	"content": "wip\n"
},
{
	"uri": "https://wirelib.github.io/usage/wire/",
	"title": "The Wire Object",
	"tags": [],
	"description": "",
	"content": "wip\n"
},
{
	"uri": "https://wirelib.github.io/usage/wire.1/",
	"title": "Context",
	"tags": [],
	"description": "",
	"content": "wip\n"
},
{
	"uri": "https://wirelib.github.io/installation/maven/",
	"title": "Maven",
	"tags": [],
	"description": "",
	"content": "wip\n"
},
{
	"uri": "https://wirelib.github.io/installation/gradle/",
	"title": "Gradle",
	"tags": [],
	"description": "",
	"content": "wip\n"
},
{
	"uri": "https://wirelib.github.io/usage/callbacks/",
	"title": "Register Callbacks",
	"tags": [],
	"description": "",
	"content": " A Wire bot is basically a listener that processes updates from Telegram by executing user-defined functions. Those functions must be registered before starting the bot.\nIn this example we register a callback that will resend the text content of every message it receives (see Echo Bot).\nbot.on(UpdateType.MESSAGE, ctx -\u0026gt; { ctx.reply(ctx.getMessage().getText()); return null; });  CAVEAT: Wire is written in Kotlin, and callbacks are implemented as functions of type (ctx: Context) -\u0026gt; Unit. This means that while in Kotlin we can write our lambda as:\nbot.on(UpdateType.MESSAGE) { ctx -\u0026gt; ctx.reply(ctx.getMessage().getText()); }  in Java we need to add return null; at the end to compensate for the Unit return type. This is unfortunate but necessary.\nNote that callbacks are chainable, as every hook method returns the instance of Wire\nbot.onCommand(\u0026quot;start\u0026quot;, ctx -\u0026gt; {}) .onCommand(\u0026quot;stop\u0026quot;, ctx -\u0026gt; {}) .onText(\u0026quot;Hello\u0026quot;, ctx -\u0026gt; {});  Available callbacks Update Type public Wire on(UpdateType updateType, Function\u0026lt;Context, Unit\u0026gt; callback)  Example\nbot.on(UpdateType.MESSAGE, ctx -\u0026gt; { //stuff return null; });  Callback Query bot.onCallbackQuery(Function\u0026lt;Context, Unit\u0026gt; callback)  Shortcut for\nbot.on(UpdateType.CALLBACK_QUERY, ctx -\u0026gt; { //stuff return null; });  Command public Wire onCommand(String command, Function\u0026lt;Context, Unit\u0026gt; callback)  Example\nbot.onCommand(\u0026quot;help\u0026quot;, ctx -\u0026gt; { //do stuff on '/he√≤p' command return null; });  Start command bot.onStartCommand(Function\u0026lt;Context, Unit\u0026gt; callback)  Shortcut for\nbot.onCommand(\u0026quot;start\u0026quot;, ctx -\u0026gt; { //stuff return null; });  Text bot.onText(kotlin.text.Regex regex, Function\u0026lt;Context, Unit\u0026gt; callback)  Example\nbot.onText(\u0026quot;\\\\w* Hello\u0026quot;, ctx -\u0026gt; { //do stuff when message text matches the regex return null; });  Message Entity Type bot.onMessageEntity(MessageEntityType messageEntityType, Function\u0026lt;Context, Unit\u0026gt; callback)  Example\nbot.onMessageEntity(MessageEntityType.MENTION, ctx -\u0026gt; { //do stuff if the message has at least a mention entity return null; });  Action (callback query data) Run when a callback query with the provided data is processed\nbot.onAction(String data, Function\u0026lt;Context, Unit\u0026gt; callback)  Example\nbot.onAction(\u0026quot;login\u0026quot;, ctx -\u0026gt; { //stuff return null; });  Special Hooks Wire has two types of special callbacks that can be registered and executed on specific conditions.\nCatch public Wire catch(Function\u0026lt;? extends Throwable, Unit\u0026gt; handler)  Catch is executed when an error occurs. The default implementation logs to an SLF4J logger with ERROR level. logger.error(t, t.getMessage();\nYou can specify your own by calling:\nbot.catch(t -\u0026gt; { // do something with this Throwable return null; });  Use Use is a bit special. It allows to register functions that are run in stack-like, sequential manner on every update, before processing the callbacks. See Middlewares for more details.\nExample:\nbot.use((ctx, next) -\u0026gt; { ctx.reply(\u0026quot;I'm First\u0026quot;); next.invoke(ctx); return null; }); bot.use((ctx, next) -\u0026gt; { ctx.reply(\u0026quot;I'm Second\u0026quot;); next.invoke(ctx); return null; });  We all agree that the syntax is a bit clunky in Java. As you can see it\u0026rsquo;s much better in Kotlin:\nbot.use {ctx, next -\u0026gt; ctx.reply(\u0026quot;I'm First\u0026quot;); next(ctx); } bot.use {ctx, next -\u0026gt; ctx.reply(\u0026quot;I'm Second\u0026quot;); next(ctx); }  "
},
{
	"uri": "https://wirelib.github.io/usage/middlewares/",
	"title": "Middlewares",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://wirelib.github.io/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Wire A fast, easy to use library to create Telegram bots on the JVM platform "
},
{
	"uri": "https://wirelib.github.io/usage/context/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://wirelib.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://wirelib.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]